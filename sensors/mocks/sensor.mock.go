// Code generated by MockGen. DO NOT EDIT.
// Source: sensor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ImTheTom/air-quality/models"
	sensors "github.com/ImTheTom/air-quality/sensors"
	gomock "go.uber.org/mock/gomock"
)

// MockAirQualityReader is a mock of AirQualityReader interface.
type MockAirQualityReader struct {
	ctrl     *gomock.Controller
	recorder *MockAirQualityReaderMockRecorder
}

// MockAirQualityReaderMockRecorder is the mock recorder for MockAirQualityReader.
type MockAirQualityReaderMockRecorder struct {
	mock *MockAirQualityReader
}

// NewMockAirQualityReader creates a new mock instance.
func NewMockAirQualityReader(ctrl *gomock.Controller) *MockAirQualityReader {
	mock := &MockAirQualityReader{ctrl: ctrl}
	mock.recorder = &MockAirQualityReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAirQualityReader) EXPECT() *MockAirQualityReaderMockRecorder {
	return m.recorder
}

// ReadSensor mocks base method.
func (m *MockAirQualityReader) ReadSensor(wantedReading sensors.Reading) *models.SensorReading {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSensor", wantedReading)
	ret0, _ := ret[0].(*models.SensorReading)
	return ret0
}

// ReadSensor indicates an expected call of ReadSensor.
func (mr *MockAirQualityReaderMockRecorder) ReadSensor(wantedReading interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSensor", reflect.TypeOf((*MockAirQualityReader)(nil).ReadSensor), wantedReading)
}
