// Code generated by MockGen. DO NOT EDIT.
// Source: airqualitysensor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAirQualitySensor is a mock of AirQualitySensor interface.
type MockAirQualitySensor struct {
	ctrl     *gomock.Controller
	recorder *MockAirQualitySensorMockRecorder
}

// MockAirQualitySensorMockRecorder is the mock recorder for MockAirQualitySensor.
type MockAirQualitySensorMockRecorder struct {
	mock *MockAirQualitySensor
}

// NewMockAirQualitySensor creates a new mock instance.
func NewMockAirQualitySensor(ctrl *gomock.Controller) *MockAirQualitySensor {
	mock := &MockAirQualitySensor{ctrl: ctrl}
	mock.recorder = &MockAirQualitySensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAirQualitySensor) EXPECT() *MockAirQualitySensorMockRecorder {
	return m.recorder
}

// ReadHazardousGases mocks base method.
func (m *MockAirQualitySensor) ReadHazardousGases() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHazardousGases")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadHazardousGases indicates an expected call of ReadHazardousGases.
func (mr *MockAirQualitySensorMockRecorder) ReadHazardousGases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHazardousGases", reflect.TypeOf((*MockAirQualitySensor)(nil).ReadHazardousGases))
}

// ReadHumidity mocks base method.
func (m *MockAirQualitySensor) ReadHumidity() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHumidity")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadHumidity indicates an expected call of ReadHumidity.
func (mr *MockAirQualitySensorMockRecorder) ReadHumidity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHumidity", reflect.TypeOf((*MockAirQualitySensor)(nil).ReadHumidity))
}

// ReadLight mocks base method.
func (m *MockAirQualitySensor) ReadLight() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLight")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLight indicates an expected call of ReadLight.
func (mr *MockAirQualitySensorMockRecorder) ReadLight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLight", reflect.TypeOf((*MockAirQualitySensor)(nil).ReadLight))
}

// ReadPressure mocks base method.
func (m *MockAirQualitySensor) ReadPressure() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPressure")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPressure indicates an expected call of ReadPressure.
func (mr *MockAirQualitySensorMockRecorder) ReadPressure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPressure", reflect.TypeOf((*MockAirQualitySensor)(nil).ReadPressure))
}

// ReadTemperature mocks base method.
func (m *MockAirQualitySensor) ReadTemperature() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTemperature")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemperature indicates an expected call of ReadTemperature.
func (mr *MockAirQualitySensorMockRecorder) ReadTemperature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemperature", reflect.TypeOf((*MockAirQualitySensor)(nil).ReadTemperature))
}
