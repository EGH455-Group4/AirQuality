// Code generated by MockGen. DO NOT EDIT.
// Source: airquality.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	sync "sync"

	models "github.com/ImTheTom/air-quality/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAirQualityService is a mock of AirQualityService interface.
type MockAirQualityService struct {
	ctrl     *gomock.Controller
	recorder *MockAirQualityServiceMockRecorder
}

// MockAirQualityServiceMockRecorder is the mock recorder for MockAirQualityService.
type MockAirQualityServiceMockRecorder struct {
	mock *MockAirQualityService
}

// NewMockAirQualityService creates a new mock instance.
func NewMockAirQualityService(ctrl *gomock.Controller) *MockAirQualityService {
	mock := &MockAirQualityService{ctrl: ctrl}
	mock.recorder = &MockAirQualityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAirQualityService) EXPECT() *MockAirQualityServiceMockRecorder {
	return m.recorder
}

// GetAirQuality mocks base method.
func (m *MockAirQualityService) GetAirQuality() *models.AirQuality {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirQuality")
	ret0, _ := ret[0].(*models.AirQuality)
	return ret0
}

// GetAirQuality indicates an expected call of GetAirQuality.
func (mr *MockAirQualityServiceMockRecorder) GetAirQuality() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirQuality", reflect.TypeOf((*MockAirQualityService)(nil).GetAirQuality))
}

// RunReadSensors mocks base method.
func (m *MockAirQualityService) RunReadSensors(closeCh chan bool, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunReadSensors", closeCh, wg)
}

// RunReadSensors indicates an expected call of RunReadSensors.
func (mr *MockAirQualityServiceMockRecorder) RunReadSensors(closeCh, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadSensors", reflect.TypeOf((*MockAirQualityService)(nil).RunReadSensors), closeCh, wg)
}

// SingleRead mocks base method.
func (m *MockAirQualityService) SingleRead() *models.AirQuality {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingleRead")
	ret0, _ := ret[0].(*models.AirQuality)
	return ret0
}

// SingleRead indicates an expected call of SingleRead.
func (mr *MockAirQualityServiceMockRecorder) SingleRead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleRead", reflect.TypeOf((*MockAirQualityService)(nil).SingleRead))
}

// Start mocks base method.
func (m *MockAirQualityService) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockAirQualityServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAirQualityService)(nil).Start))
}

// Stop mocks base method.
func (m *MockAirQualityService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockAirQualityServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAirQualityService)(nil).Stop))
}
