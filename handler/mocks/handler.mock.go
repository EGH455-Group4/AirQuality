// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAirQualityHandler is a mock of AirQualityHandler interface.
type MockAirQualityHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAirQualityHandlerMockRecorder
}

// MockAirQualityHandlerMockRecorder is the mock recorder for MockAirQualityHandler.
type MockAirQualityHandlerMockRecorder struct {
	mock *MockAirQualityHandler
}

// NewMockAirQualityHandler creates a new mock instance.
func NewMockAirQualityHandler(ctrl *gomock.Controller) *MockAirQualityHandler {
	mock := &MockAirQualityHandler{ctrl: ctrl}
	mock.recorder = &MockAirQualityHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAirQualityHandler) EXPECT() *MockAirQualityHandlerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockAirQualityHandler) Run() *http.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(*http.Server)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAirQualityHandlerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAirQualityHandler)(nil).Run))
}
