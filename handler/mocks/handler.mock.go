// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAirQualityHandler is a mock of AirQualityHandler interface.
type MockAirQualityHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAirQualityHandlerMockRecorder
}

// MockAirQualityHandlerMockRecorder is the mock recorder for MockAirQualityHandler.
type MockAirQualityHandlerMockRecorder struct {
	mock *MockAirQualityHandler
}

// NewMockAirQualityHandler creates a new mock instance.
func NewMockAirQualityHandler(ctrl *gomock.Controller) *MockAirQualityHandler {
	mock := &MockAirQualityHandler{ctrl: ctrl}
	mock.recorder = &MockAirQualityHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAirQualityHandler) EXPECT() *MockAirQualityHandlerMockRecorder {
	return m.recorder
}

// AirQualityHandler mocks base method.
func (m *MockAirQualityHandler) AirQualityHandler(rsp http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AirQualityHandler", rsp, req)
}

// AirQualityHandler indicates an expected call of AirQualityHandler.
func (mr *MockAirQualityHandlerMockRecorder) AirQualityHandler(rsp, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AirQualityHandler", reflect.TypeOf((*MockAirQualityHandler)(nil).AirQualityHandler), rsp, req)
}

// Run mocks base method.
func (m *MockAirQualityHandler) Run() *http.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(*http.Server)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAirQualityHandlerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAirQualityHandler)(nil).Run))
}

// SingleReadHandler mocks base method.
func (m *MockAirQualityHandler) SingleReadHandler(rsp http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SingleReadHandler", rsp, req)
}

// SingleReadHandler indicates an expected call of SingleReadHandler.
func (mr *MockAirQualityHandlerMockRecorder) SingleReadHandler(rsp, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleReadHandler", reflect.TypeOf((*MockAirQualityHandler)(nil).SingleReadHandler), rsp, req)
}

// StartHandler mocks base method.
func (m *MockAirQualityHandler) StartHandler(rsp http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartHandler", rsp, req)
}

// StartHandler indicates an expected call of StartHandler.
func (mr *MockAirQualityHandlerMockRecorder) StartHandler(rsp, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartHandler", reflect.TypeOf((*MockAirQualityHandler)(nil).StartHandler), rsp, req)
}

// StopHandler mocks base method.
func (m *MockAirQualityHandler) StopHandler(rsp http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopHandler", rsp, req)
}

// StopHandler indicates an expected call of StopHandler.
func (mr *MockAirQualityHandlerMockRecorder) StopHandler(rsp, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopHandler", reflect.TypeOf((*MockAirQualityHandler)(nil).StopHandler), rsp, req)
}
